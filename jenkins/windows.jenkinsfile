void setBuildStatus(String message, String state) {
    step([
        $class: "GitHubCommitStatusSetter",
        reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/open-media-streamer/oms-client-native"],
        contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/windows"],
        errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
        statusResultSource: [$class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]]]
    ]);
}
pipeline {
    agent any
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr:"5"))
        timeout(time: 40, unit: "MINUTES")
    }
    stages {
        stage("BuildAndEnv"){
            parallel {
                stage("build") {
                    agent{
                        node {
                            label "windows"
                            customWorkspace "$env.windowsCIPath/src"
                        }
                    }
                    steps {
                        echo "$GIT_COMMIT"
                        bat "%windowsCIPath%/buildSdk.bat %GIT_COMMIT%"
                    }
                }
                stage("startMcu") {
                    agent{
                        node {
                            label "$env.windowsServer"
                        }
                    }
                    steps {
                        withEnv(["JENKINS_NODE_COOKIE=dontkill"]) {
                            sh "${mcuScriptPath}/startmcu.sh"
                        }
                    }
                }
                stage("startP2PServer") {
                    agent{
                        node {
                            label "$env.windowsServer"
                        }
                    }
                    steps {
                        withEnv(["JENKINS_NODE_COOKIE=dontkill"]) {
                            sh "${p2pScriptPath}/startP2PServer.sh"
                        }
                    }
                }
            }
        }
        stage("BulidConference") {
            agent{
                node {
                    label "windows"
                }
            }
            steps {
                echo "Buliding.."
                bat "%windowsConferenceCasePath%/build.bat"
            }
        }
        stage("BulidTestP2P") {
            agent{
                node {
                    label "windows"
                }
            }
            steps {
                echo "Buliding.."
                bat "%windowsP2PCasePath%/build.bat"
            }
        }
        stage("TestConference") {
            agent{
                node {
                    label "windows"
                }
            }
            steps {
                echo "Testing.."
                bat "%windowsConferenceCasePath%/runCase.bat"
            }
        }
        stage("TestP2P") {
            agent{
                node {
                    label "windows"
                }
            }
            steps {
                echo "Testing.."
                bat "%windowsP2PCasePath%/runCase.bat"
            }
        }
        stage("Deploy") {
            agent{
                node {
                label "$env.windowsServer"
                }
            }
            steps {
                echo "Deploying...."
                withEnv(["JENKINS_NODE_COOKIE=dontkill"]) {
                    sh "${mcuScriptPath}/killserver.sh"
                }
            }
        }
    }
    post {
        always {
            echo "One way or another, I have finished"
        }
        success {
            setBuildStatus("Build succeeded", "SUCCESS");
            echo "I succeeeded!"
            mail to: "$env.mailtoUser",
            subject: "Success Pipeline: ${currentBuild.fullDisplayName}",
            body: "Success with ${env.BUILD_URL}"
        }
        unstable {
            echo "I am unstable :/"
            mail to: "$env.mailtoUser",
            subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
            body: "Something is wrong with ${env.BUILD_URL}"
        }
        failure {
            setBuildStatus("Build failed", "FAILURE");
            echo "I failed :("
            mail to: "$env.mailtoUser",
            subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
            body: "Something is wrong with ${env.BUILD_URL}"
        }
    }
}

