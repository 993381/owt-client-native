From 07e2ddb4cc112b07ef1d468792d5309b3cb18b23 Mon Sep 17 00:00:00 2001
From: Qiu Jianlin <jianlin.qiu@intel.com>
Date: Tue, 16 Oct 2018 10:59:30 +0800
Subject: [PATCH] Supress some warnings and disable thin archieve for Linux

---
 config/c++/c++.gni       |  2 +-
 config/compiler/BUILD.gn | 12 ++++++------
 2 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/config/c++/c++.gni b/config/c++/c++.gni
index 1b94aaa8d..cc3c031dd 100644
--- a/config/c++/c++.gni
+++ b/config/c++/c++.gni
@@ -12,7 +12,7 @@ declare_args() {
   # is not supported.
   use_custom_libcxx =
       is_msan || is_fuchsia ||
-      (is_linux &&
+      (is_linux && is_clang &&
        (!is_chromeos || default_toolchain != "//build/toolchain/cros:target"))
 
   # Use libc++ instead of stdlibc++ when using the host_cpu toolchain, even if
diff --git a/config/compiler/BUILD.gn b/config/compiler/BUILD.gn
index 2ec751f32..010039c49 100644
--- a/config/compiler/BUILD.gn
+++ b/config/compiler/BUILD.gn
@@ -477,7 +477,7 @@ config("compiler") {
   # Clang-specific compiler flags setup.
   # ------------------------------------
   if (is_clang) {
-    cflags += [ "-fcolor-diagnostics" ]
+    #cflags += [ "-fcolor-diagnostics" ]
 
     # Enable -fmerge-all-constants. This used to be the default in clang
     # for over a decade. It makes clang non-conforming, but is fairly safe
@@ -485,7 +485,7 @@ config("compiler") {
     # disabling this (https://bugs.llvm.org/show_bug.cgi?id=18538#c13),
     # but for now it looks like our build might rely on it
     # (https://crbug.com/829795).
-    cflags += [ "-fmerge-all-constants" ]
+    #cflags += [ "-fmerge-all-constants" ]
   }
 
   if (use_lld) {
@@ -547,7 +547,7 @@ config("compiler") {
   # paths to the tools it invokes. We don't want this because we don't
   # really need it and it can mess up the goma cache entries.
   if (is_clang && !is_nacl) {
-    cflags += [ "-no-canonical-prefixes" ]
+    #cflags += [ "-no-canonical-prefixes" ]
   }
 
   # C11/C++11 compiler flags setup.
@@ -731,7 +731,7 @@ config("compiler") {
   # https://crbug.com/847724).
   if (is_clang && !is_nacl && target_os != "chromeos" && !use_xcode_clang &&
       (is_win || use_custom_libcxx)) {
-    cflags += [ "-fcomplete-member-pointers" ]
+    #cflags += [ "-fcomplete-member-pointers" ]
   }
 
   # Pass the same C/C++ flags to the objective C/C++ compiler.
@@ -1489,7 +1489,7 @@ config("default_warnings") {
           "-Wno-nonportable-include-path",
 
           # TODO(thakis): https://crbug.com/683349
-          "-Wno-user-defined-warnings",
+          #"-Wno-user-defined-warnings",
 
           # TODO(hans): https://crbug.com/681136
           "-Wno-unused-lambda-capture",
@@ -1698,7 +1698,7 @@ config("thin_archive") {
   # Mac and iOS use the mac-specific "libtool" command, not ar, which doesn't
   # have a "thin archive" mode (it does accept -T, but it means truncating
   # archive names to 16 characters, which is not what we want).
-  if ((is_posix && !is_nacl && !is_mac && !is_ios) || is_fuchsia) {
+  if ((is_posix && !is_nacl && !is_mac && !is_ios && !is_linux) || is_fuchsia) {
     arflags = [ "-T" ]
   }
 }
-- 
2.18.0.windows.1

