#
# Intel License
#

import("//build_overrides/webrtc.gni")
import("//testing/test.gni")

if (is_android) {
  import("//build/config/android/config.gni")
  import("//build/config/android/rules.gni")
}

if (is_ios) {
  import("//build/config/ios/rules.gni")
}

declare_args() {
  include_internal_audio_device = true
  woogeen_msdk_lib_root = ""

  # Disable some features while rebasing to M63. It should be removed once rebasing is finished.
  ics_rebase_m63 = true
}

if (is_ios || is_mac) {
  config("woogeen_sdk_objc_warnings_config") {
    # Bug 1375. Fix -Wobjc-missing-property-synthesis warnings.
    cflags_objc = [ "-Wno-objc-missing-property-synthesis" ]
    cflags_objcc = [ "-Wno-objc-missing-property-synthesis" ]
  }
}

if (is_android) {
  config("libjingle_peerconnection_jni_warnings_config") {
    # The warnings below are enabled by default. Since GN orders compiler flags
    # for a target before flags from configs, the only way to disable such
    # warnings is by having them in a separate config, loaded from the target.
    if (!is_win) {
      cflags = [
        "-Wno-sign-compare",
        "-Wno-unused-variable",
      ]
    }
  }
}

if (is_android) {
  dist_jar("libjingle_woogeen_java") {
    output = "${root_out_dir}/lib.java/${target_name}.jar"
    direct_deps_only = true
    use_interface_jars = false
    deps = [
      "//third_party/webrtc/base:base_java",
      "//third_party/webrtc/modules/audio_device:audio_device_java",
      "//third_party/webrtc/sdk/android:libjingle_peerconnection_java",
      "//third_party/webrtc/sdk/android:libjingle_peerconnection_metrics_default_java",
    ]
  }
}

static_library("ics_deps") {
  deps = [
    "//third_party/jsoncpp",
    "//third_party/webrtc/rtc_base:rtc_json",
  ]
  complete_static_lib = true
}

if (!is_ios) {
  static_library("ics") {
    deps = [
      ":ics_sdk_base",
      ":ics_sdk_conf",
      ":ics_sdk_p2p",
      "//third_party/protobuf:protobuf_lite",
      "//third_party/webrtc",
      "//third_party/webrtc/api:libjingle_peerconnection",
    ]
    complete_static_lib = true
  }
}

static_library("ics_sdk_base") {
  sources = [
    "sdk/base/customizedframescapturer.cc",
    "sdk/base/customizedframescapturer.h",
    "sdk/base/customizedvideoencoderproxy.cc",
    "sdk/base/customizedvideoencoderproxy.h",
    "sdk/base/desktopcapturer.cc",
    "sdk/base/desktopcapturer.h",
    "sdk/base/deviceutils.cc",
    "sdk/base/encodedvideoencoderfactory.cc",
    "sdk/base/encodedvideoencoderfactory.h",
    "sdk/base/eventtrigger.h",
    "sdk/base/exception.cc",
    "sdk/base/functionalobserver.cc",
    "sdk/base/functionalobserver.h",
    "sdk/base/globalconfiguration.cc",
    "sdk/base/localcamerastreamparameters.cc",
    "sdk/base/logging.cc",
    "sdk/base/mediaconstraintsimpl.h",
    "sdk/base/mediautils.cc",
    "sdk/base/mediautils.h",
    "sdk/base/peerconnectionchannel.cc",
    "sdk/base/peerconnectionchannel.h",
    "sdk/base/peerconnectiondependencyfactory.cc",
    "sdk/base/peerconnectiondependencyfactory.h",
    "sdk/base/sdputils.cc",
    "sdk/base/sdputils.h",
    "sdk/base/stream.cc",
    "sdk/base/stringutils.cc",
    "sdk/base/stringutils.h",
    "sdk/base/sysinfo.cc",
    "sdk/base/sysinfo.h",
    "sdk/base/webrtcvideorendererimpl.cc",
    "sdk/base/webrtcvideorendererimpl.h",
    "sdk/base/windowcapturer.cc",
    "sdk/base/windowcapturer.h",
    "sdk/include/cpp/ics/base/clientconfiguration.h",
    "sdk/include/cpp/ics/base/connectionstats.h",
    "sdk/include/cpp/ics/base/deviceutils.h",
    "sdk/include/cpp/ics/base/exception.h",
    "sdk/include/cpp/ics/base/framegeneratorinterface.h",
    "sdk/include/cpp/ics/base/localcamerastreamparameters.h",
    "sdk/include/cpp/ics/base/logging.h",
    "sdk/include/cpp/ics/base/stream.h",
    "sdk/include/cpp/ics/base/videodecoderinterface.h",
    "sdk/include/cpp/ics/base/videorendererinterface.h",
  ]

  public_deps = [
    "//third_party/libyuv:libyuv",
    "//third_party/webrtc/modules/desktop_capture:desktop_capture",
    "//third_party/webrtc/rtc_base:rtc_json",
    "//third_party/webrtc/system_wrappers:metrics_default",
    "//third_party/webrtc/system_wrappers:system_wrappers_default",
  ]

  include_dirs = [
    "sdk/include/cpp",
    "include/msdk",
    "//third_party",
  ]

  defines = [ "WEBRTC_INCLUDE_INTERNAL_AUDIO_DEVICE" ]

  if (is_ios) {
    sources += [
      "sdk/base/ios/networkmonitorios.cc",
      "sdk/base/ios/networkmonitorios.h",
    ]
    deps = [
      "//third_party/webrtc/sdk:framework_objc+link",
    ]
  }

  if (is_win) {
    sources += [
      "sdk/base/win/d3dnativeframe.h",
      "sdk/base/win/external_msdk_decoder.cpp",
      "sdk/base/win/external_msdk_decoder.h",
      "sdk/base/win/h264_video_mft_encoder.cpp",
      "sdk/base/win/h264_video_mft_encoder.h",
      "sdk/base/win/mftmediadecoder.cpp",
      "sdk/base/win/mftmediadecoder.h",
      "sdk/base/win/mftvideodecoderfactory.cpp",
      "sdk/base/win/mftvideodecoderfactory.h",
      "sdk/base/win/mftvideoencoderfactory.cpp",
      "sdk/base/win/mftvideoencoderfactory.h",
      "sdk/base/win/videorendererwin.cpp",
      "sdk/base/win/videorendererwin.h",
    ]

    if (rtc_use_h265) {
      sources += [
        "sdk/base/win/h265_msdk_decoder.cpp",
        "sdk/base/win/h265_msdk_decoder.h",
        "sdk/base/win/h265_msdk_encoder.cpp",
        "sdk/base/win/h265_msdk_encoder.h",
      ]
    }
  }

  if (!is_ios) {
    sources += [
      "sdk/base/customizedvideodecoderfactory.cc",
      "sdk/base/customizedvideodecoderfactory.h",
      "sdk/base/customizedvideodecoderproxy.cc",
      "sdk/base/customizedvideodecoderproxy.h",
    ]
  }

  if (include_internal_audio_device) {
    sources += [
      "sdk/base/customizedaudiocapturer.cc",
      "sdk/base/customizedaudiocapturer.h",
      "sdk/base/customizedaudiodevicemodule.cc",
      "sdk/base/customizedaudiodevicemodule.h",
    ]
  }

  if (is_clang) {
    configs -= [ "//build/config/clang:find_bad_constructs" ]
  }

  if (is_win && is_clang) {
    cflags = [
      "-Wno-microsoft-extra-qualification",
      "-Wno-reorder",
    ]
  }

  if (!ics_rebase_m63) {
    defines += [ "ICS_REBASE_M63" ]
  }
}

static_library("ics_sdk_p2p") {
  deps = [
    ":ics_sdk_base",
    "//third_party/jsoncpp:jsoncpp",
  ]

  include_dirs = [
    "sdk/include/cpp",
    "//third_party",
  ]

  sources = [
    "sdk/include/cpp/ics/p2p/p2ppublication.h",
    "sdk/include/cpp/ics/p2p/p2pexception.h",
    "sdk/include/cpp/ics/p2p/p2psignalingchannelinterface.h",
    "sdk/include/cpp/ics/p2p/p2psignalingreceiverinterface.h",
    "sdk/include/cpp/ics/p2p/p2psignalingsenderinterface.h",
    "sdk/include/cpp/ics/p2p/p2pclient.h",
    "sdk/p2p/p2ppublication.cc",
    "sdk/p2p/p2pexception.cc",
    "sdk/p2p/p2ppeerconnectionchannel.cc",
    "sdk/p2p/p2ppeerconnectionchannel.h",
    "sdk/p2p/p2ppeerconnectionchannelobservercppimpl.cc",
    "sdk/p2p/p2ppeerconnectionchannelobservercppimpl.h",
    "sdk/p2p/p2pclient.cc",
  ]

  if (is_clang) {
    configs -= [ "//build/config/clang:find_bad_constructs" ]
  }
}

static_library("ics_sdk_conf") {
  deps = [
    ":ics_sdk_base",
    "//third_party/jsoncpp:jsoncpp",
    "//third_party/webrtc/rtc_base:rtc_json",
  ]

  include_dirs = [
    "sdk/include/cpp",
    "//third_party",
  ]

  sources = [
    "sdk/conference/conferencepublication.cc",
    "sdk/conference/conferencesubscription.cc",
    "sdk/conference/conferenceclient.cc",
    "sdk/conference/conferenceexception.cc",
    "sdk/conference/conferencepeerconnectionchannel.cc",
    "sdk/conference/conferencepeerconnectionchannel.h",
    "sdk/conference/conferencesocketsignalingchannel.cc",
    "sdk/conference/conferencesocketsignalingchannel.h",
    "sdk/conference/remotemixedstream.cc",
    "sdk/include/cpp/ics/conference/conferenceclient.h",
    "sdk/include/cpp/ics/conference/conferenceexception.h",
    "sdk/include/cpp/ics/conference/externaloutput.h",
    "sdk/include/cpp/ics/conference/remotemixedstream.h",
    "sdk/include/cpp/ics/conference/user.h",
  ]

  if (is_clang) {
    configs -= [ "//build/config/clang:find_bad_constructs" ]
  }
}

if (is_ios) {
  static_library("ics_sdk_objc") {
    deps = [
      ":ics_sdk_base",
      ":ics_sdk_conf",
      ":ics_sdk_p2p",
      "//third_party/jsoncpp",
      "//third_party/webrtc/system_wrappers:system_wrappers_default",
    ]

    include_dirs = [
      "//third_party",
      "//third_party/webrtc/sdk/objc/Framework/Headers",
      "sdk/include/cpp",
      "sdk/include/objc",
    ]

    configs += [
      "//build/config/compiler:enable_arc",
      ":woogeen_sdk_objc_warnings_config",
    ]

    sources = [
      "sdk/base/objc/CameraVideoCapturer.h",
      "sdk/base/objc/CameraVideoCapturer.mm",
      "sdk/base/objc/FrameGeneratorObjcImpl.h",
      "sdk/base/objc/FrameGeneratorObjcImpl.mm",
      "sdk/base/objc/ObjcVideoCapturerInterface",
      "sdk/base/objc/ObjcVideoCodecFactory.h",
      "sdk/base/objc/ObjcVideoCodecFactory.mm",
      "sdk/base/objc/ICSConnectionStats+Internal.h",
      "sdk/base/objc/ICSConnectionStats.mm",
      "sdk/base/objc/ICSErrors.m",
      "sdk/base/objc/ICSFactory.mm",
      "sdk/base/objc/ICSGlobalConfiguration.mm",
      "sdk/base/objc/ICSLocalCameraStream.mm",
      "sdk/base/objc/ICSLocalCameraStreamParameters+Internal.h",
      "sdk/base/objc/ICSLocalCameraStreamParameters.mm",

      #"sdk/base/objc/ICSLocalCustomizedStream.mm",
      #"sdk/base/objc/ICSLocalCustomizedStreamParameters+Internal.h",
      #"sdk/base/objc/ICSLocalCustomizedStreamParameters.mm",
      "sdk/base/objc/ICSLocalStream+Internal.h",
      "sdk/base/objc/ICSLocalStream.mm",
      "sdk/base/objc/ICSMediaFormat+Internal.h",
      "sdk/base/objc/ICSMediaFormat.mm",
      "sdk/base/objc/ICSPeerConnectionDependencyFactory.h",
      "sdk/base/objc/ICSPeerConnectionDependencyFactory.mm",
      "sdk/base/objc/RTCPeerConnectionFactory+ICS.h",
      "sdk/base/objc/RTCPeerConnectionFactory+ICS.mm",
      "sdk/base/objc/ICSRemoteCameraStream.mm",
      "sdk/base/objc/ICSRemoteScreenStream.mm",
      "sdk/base/objc/ICSRemoteStream.mm",
      "sdk/base/objc/ICSStream+Internal.h",
      "sdk/base/objc/ICSStream.mm",
      "sdk/base/objc/public/ICSConnectionStats.h",
      "sdk/base/objc/public/ICSErrors.h",
      "sdk/base/objc/public/ICSFrameGeneratorProtocol.h",
      "sdk/base/objc/public/ICSGlobalConfiguration.h",
      "sdk/base/objc/public/ICSLocalCameraStream.h",
      "sdk/base/objc/public/ICSLocalCameraStreamParameters.h",
      "sdk/base/objc/public/ICSLocalCustomizedStream.h",
      "sdk/base/objc/public/ICSLocalCustomizedStreamParameters.h",
      "sdk/base/objc/public/ICSLocalStream.h",
      "sdk/base/objc/public/ICSMediaCodec.h",
      "sdk/base/objc/public/ICSMediaFormat.h",
      "sdk/base/objc/public/ICSRemoteCameraStream.h",
      "sdk/base/objc/public/ICSRemoteScreenStream.h",
      "sdk/base/objc/public/ICSRemoteStream.h",
      "sdk/base/objc/public/ICSStream.h",
      "sdk/base/sysinfoios.mm",
      "sdk/conference/objc/ConferenceClientObserverObjcImpl.h",
      "sdk/conference/objc/ConferenceClientObserverObjcImpl.mm",
      "sdk/conference/objc/ICSConferenceClient.mm",
      "sdk/conference/objc/ICSConferenceClientConfiguration.mm",
      "sdk/conference/objc/ICSConferenceSubscription+Private.h",
      "sdk/conference/objc/ICSConferenceSubscription.mm",
      "sdk/conference/objc/ICSConferenceUser+Internal.h",
      "sdk/conference/objc/ICSConferenceUser.mm",
      "sdk/conference/objc/ICSRemoteMixedStream.mm",
      "sdk/conference/objc/RemoteMixedStreamObserverObjcImpl.h",
      "sdk/conference/objc/RemoteMixedStreamObserverObjcImpl.mm",
      "sdk/conference/objc/ICSConferencePublication.mm",
      "sdk/conference/objc/public/ICSConferenceClient.h",
      "sdk/conference/objc/public/ICSConferenceClientConfiguration.h",
      "sdk/conference/objc/public/ICSConferenceClientObserver.h",
      "sdk/conference/objc/public/ICSConferenceErrors.h",
      "sdk/conference/objc/public/ICSConferenceSubscription.h",
      "sdk/conference/objc/public/ICSConferenceUser.h",
      "sdk/conference/objc/public/ICSRemoteMixedStream.h",
      "sdk/conference/objc/public/ICSRemoteMixedStreamObserver.h",
      "sdk/p2p/objc/P2PPeerConnectionChannelObserverObjcImpl.h",
      "sdk/p2p/objc/P2PPeerConnectionChannelObserverObjcImpl.mm",
      "sdk/p2p/objc/ICSP2PPeerConnectionChannel.h",
      "sdk/p2p/objc/ICSP2PPeerConnectionChannel.mm",
      "sdk/p2p/objc/ICSP2PSignalingSenderObjcImpl.h",
      "sdk/p2p/objc/ICSP2PSignalingSenderObjcImpl.mm",
      "sdk/p2p/objc/ICSPeerClient.m",
      "sdk/p2p/objc/ICSPeerClientConfiguration.m",
      "sdk/p2p/objc/public/RTCP2PErrors.h",
      "sdk/p2p/objc/public/ICSP2PPeerConnectionChannelObserver.h",
      "sdk/p2p/objc/public/ICSP2PSignalingChannelProtocol.h",
      "sdk/p2p/objc/public/ICSP2PSignalingReceiverProtocol.h",
      "sdk/p2p/objc/public/ICSP2PSignalingSenderProtocol.h",
      "sdk/p2p/objc/public/ICSPeerClient.h",
      "sdk/p2p/objc/public/ICSPeerClientConfiguration.h",
      "sdk/p2p/objc/public/ICSPeerClientObserver.h",
    ]
  }
}

if (woogeen_include_tests) {
  group("woogeen_tests") {
    testonly = true

    # Only the root target should depend on this.
    visibility = [ "//:default" ]

    deps = [
      ":woogeen_unittests",
    ]
  }

  test("woogeen_unittests") {
    testonly = true

    sources = [
      "sdk/base/mediautils_unittest.cc",
      "sdk/test/unittest_main.cc",
    ]

    deps = [
      ":ics_sdk_base",
      "//testing/gmock",
      "//testing/gtest",
    ]

    libs = []

    if (is_win) {
      libs += [
        "amstrmid.lib",
        "d3d9.lib",
        "dmoguids.lib",
        "dxva2.lib",
        "mf.lib",
        "mfplat.lib",
        "mfuuid.lib",
        "msdmo.lib",
        "strmiids.lib",
        "user32.lib",
        "wmcodecdspuuid.lib",
        "ws2_32.lib",
      ]

      if (woogeen_msdk_lib_root != "") {
        libs += [
          "libmfx.lib",
          "sample_common.lib",
        ]
        lib_dirs = [ woogeen_msdk_lib_root ]
      }

      ldflags = [
        "/ignore:4098",
        "/ignore:4099",
      ]
    }
  }
}
